// Generated by gencpp from file sbg_driver/SbgImuStatus.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGIMUSTATUS_H
#define SBG_DRIVER_MESSAGE_SBGIMUSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgImuStatus_
{
  typedef SbgImuStatus_<ContainerAllocator> Type;

  SbgImuStatus_()
    : imu_com(false)
    , imu_status(false)
    , imu_accel_x(false)
    , imu_accel_y(false)
    , imu_accel_z(false)
    , imu_gyro_x(false)
    , imu_gyro_y(false)
    , imu_gyro_z(false)
    , imu_accels_in_range(false)
    , imu_gyros_in_range(false)  {
    }
  SbgImuStatus_(const ContainerAllocator& _alloc)
    : imu_com(false)
    , imu_status(false)
    , imu_accel_x(false)
    , imu_accel_y(false)
    , imu_accel_z(false)
    , imu_gyro_x(false)
    , imu_gyro_y(false)
    , imu_gyro_z(false)
    , imu_accels_in_range(false)
    , imu_gyros_in_range(false)  {
  (void)_alloc;
    }



   typedef uint8_t _imu_com_type;
  _imu_com_type imu_com;

   typedef uint8_t _imu_status_type;
  _imu_status_type imu_status;

   typedef uint8_t _imu_accel_x_type;
  _imu_accel_x_type imu_accel_x;

   typedef uint8_t _imu_accel_y_type;
  _imu_accel_y_type imu_accel_y;

   typedef uint8_t _imu_accel_z_type;
  _imu_accel_z_type imu_accel_z;

   typedef uint8_t _imu_gyro_x_type;
  _imu_gyro_x_type imu_gyro_x;

   typedef uint8_t _imu_gyro_y_type;
  _imu_gyro_y_type imu_gyro_y;

   typedef uint8_t _imu_gyro_z_type;
  _imu_gyro_z_type imu_gyro_z;

   typedef uint8_t _imu_accels_in_range_type;
  _imu_accels_in_range_type imu_accels_in_range;

   typedef uint8_t _imu_gyros_in_range_type;
  _imu_gyros_in_range_type imu_gyros_in_range;





  typedef boost::shared_ptr< ::sbg_driver::SbgImuStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgImuStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SbgImuStatus_

typedef ::sbg_driver::SbgImuStatus_<std::allocator<void> > SbgImuStatus;

typedef boost::shared_ptr< ::sbg_driver::SbgImuStatus > SbgImuStatusPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgImuStatus const> SbgImuStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgImuStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sbg_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sbg_driver': ['/home/lidar/scan_viz/src/sbg_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgImuStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgImuStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgImuStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9a1bd33215fe69b9523e359cacbe127";
  }

  static const char* value(const ::sbg_driver::SbgImuStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9a1bd33215fe69bULL;
  static const uint64_t static_value2 = 0x9523e359cacbe127ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgImuStatus";
  }

  static const char* value(const ::sbg_driver::SbgImuStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n\
# Submessage SbgImuData\n\
\n\
# True if the communication with the IMU is ok.\n\
bool imu_com\n\
\n\
# True if internal IMU passes Built In Test (Calibration, CPU)\n\
bool imu_status\n\
\n\
# True if accelerometer X passes Built In Test\n\
bool imu_accel_x\n\
\n\
# True if accelerometer Y passes Built In Test\n\
bool imu_accel_y\n\
\n\
# True if accelerometer Z passes Built In Test\n\
bool imu_accel_z\n\
\n\
# True if gyroscope X passes Built In Test\n\
bool imu_gyro_x\n\
\n\
# True if gyroscope Y passes Built In Test\n\
bool imu_gyro_y\n\
\n\
# True if gyroscope Z passes Built In Test\n\
bool imu_gyro_z\n\
\n\
# True if accelerometers are within operating range\n\
bool imu_accels_in_range\n\
\n\
# True if gyroscopes are within operating range\n\
bool imu_gyros_in_range\n\
";
  }

  static const char* value(const ::sbg_driver::SbgImuStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_com);
      stream.next(m.imu_status);
      stream.next(m.imu_accel_x);
      stream.next(m.imu_accel_y);
      stream.next(m.imu_accel_z);
      stream.next(m.imu_gyro_x);
      stream.next(m.imu_gyro_y);
      stream.next(m.imu_gyro_z);
      stream.next(m.imu_accels_in_range);
      stream.next(m.imu_gyros_in_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgImuStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgImuStatus_<ContainerAllocator>& v)
  {
    s << indent << "imu_com: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_com);
    s << indent << "imu_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_status);
    s << indent << "imu_accel_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_accel_x);
    s << indent << "imu_accel_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_accel_y);
    s << indent << "imu_accel_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_accel_z);
    s << indent << "imu_gyro_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_gyro_x);
    s << indent << "imu_gyro_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_gyro_y);
    s << indent << "imu_gyro_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_gyro_z);
    s << indent << "imu_accels_in_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_accels_in_range);
    s << indent << "imu_gyros_in_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_gyros_in_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGIMUSTATUS_H
