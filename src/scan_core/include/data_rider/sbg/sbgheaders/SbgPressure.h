// Generated by gencpp from file sbg_driver/SbgPressure.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGPRESSURE_H
#define SBG_DRIVER_MESSAGE_SBGPRESSURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgPressure_
{
  typedef SbgPressure_<ContainerAllocator> Type;

  SbgPressure_()
    : header()
    , time_stamp(0)
    , valid_pressure(false)
    , valid_altitude(false)
    , pressure(0.0)
    , altitude(0.0)  {
    }
  SbgPressure_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_stamp(0)
    , valid_pressure(false)
    , valid_altitude(false)
    , pressure(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef uint8_t _valid_pressure_type;
  _valid_pressure_type valid_pressure;

   typedef uint8_t _valid_altitude_type;
  _valid_altitude_type valid_altitude;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef float _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::sbg_driver::SbgPressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgPressure_<ContainerAllocator> const> ConstPtr;

}; // struct SbgPressure_

typedef ::sbg_driver::SbgPressure_<std::allocator<void> > SbgPressure;

typedef boost::shared_ptr< ::sbg_driver::SbgPressure > SbgPressurePtr;
typedef boost::shared_ptr< ::sbg_driver::SbgPressure const> SbgPressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgPressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgPressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sbg_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sbg_driver': ['/home/lidar/scan_viz/src/sbg_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgPressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgPressure_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgPressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgPressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgPressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgPressure_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89c42b030bba29be5014a72c91d4821d";
  }

  static const char* value(const ::sbg_driver::SbgPressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89c42b030bba29beULL;
  static const uint64_t static_value2 = 0x5014a72c91d4821dULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgPressure";
  }

  static const char* value(const ::sbg_driver::SbgPressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n\
Header header\n\
\n\
# Time since sensor is powered up Î¼s \n\
uint32 time_stamp\n\
\n\
# Pressure status (True if the altimeter equipment was correctly initialized)\n\
bool valid_pressure\n\
\n\
# Altitude (True if the altitude output is valid)\n\
bool valid_altitude\n\
\n\
# Pressure measured by the sensor (Pa)\n\
float32 pressure\n\
\n\
# Altitude computed from altitude (m)\n\
float32 altitude\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::sbg_driver::SbgPressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgPressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_stamp);
      stream.next(m.valid_pressure);
      stream.next(m.valid_altitude);
      stream.next(m.pressure);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgPressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgPressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgPressure_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_stamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "valid_pressure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_pressure);
    s << indent << "valid_altitude: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_altitude);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGPRESSURE_H
